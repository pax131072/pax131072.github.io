[
  {
    "slug": "laravel-style-validation-with-java",
    "title": "寫了一個 Laravel 風格的 Java Map Validator",
    "date": "2025-06-12",
    "tags": ["java", "spring-boot"],
    "summary": "先說結論，我還是覺得 DTO 比較好用。這 2 個月在熟悉公司的程式和風格，整體而言，非常不適應。主要是目前主管的一些開發習慣跟我之前的經驗相差甚遠。主管不喜歡用 DTO，她覺得把參數額外包裝成一個類別（或物件）是很反直覺得事情，所以限制參數都只能用 Map<String, Object> 傳遞。"
  },
  {
    "slug": "new-blog-with-react",
    "title": "做了一個新的個人網站 UI",
    "date": "2025-05-30",
    "tags": ["react"],
    "summary": "花了 2 天的時間，重新改造了自己的個人網站。前一代的網站是用 hugo 建的，要說心得的話，hugo 給使用者的體感其實蠻好的：只要先去 hugo 官網，把執行檔載下來，然後從 hugo 的主題網站挑 1-2 個自己喜歡的風格，抓下來就可以用了。"
  },
  {
    "slug": "article-1",
    "title": "使用者登入流程設計",
    "date": "2025-05-17",
    "tags": ["jwt", "frontend"],
    "summary": "在設計登入流程時，除了基本帳號密碼驗證外，還需考量： 1. 密碼加密傳輸（HTTPS） 2. 前後端驗證結果一致性 3. 多因素驗證（MFA）支援 推薦使用 JWT 或 Session 機制搭配 CSRF 防護，來確保安全性與使用體驗的平衡。"
  },
  {
    "slug": "article-2",
    "title": "前端元件設計思路",
    "date": "2025-05-19",
    "tags": [],
    "summary": "元件化是現代前端開發的核心概念。以下是幾個建議： - 每個元件只負責單一邏輯功能 - 支援 props 傳值與 event 調用 - UI 與邏輯分離（可配合 hooks 實作） 這能提升維護性、測試便利性，以及跨專案的重用性。"
  },
  {
    "slug": "article-3",
    "title": "API 設計原則與版本控制",
    "date": "2025-05-22",
    "tags": ["api", "git"],
    "summary": "良好的 API 設計需兼顧一致性、簡潔性與可擴充性。建議遵循以下原則： - 使用 RESTful 或 GraphQL 規範 - 明確定義錯誤碼與訊息格式 - 加入 /v1/、/v2/ 等版本路徑區分 這可降低破壞性變更的風險，讓前後端合作更加順暢。"
  },
  {
    "slug": "article-4",
    "title": "工程師 Debug 生存指南",
    "date": "2025-05-25",
    "tags": ["debug"],
    "summary": "你不是不會寫程式，你只是還沒找到 bug 的藏身之處。 - 先問自己：這段程式「理論上」會動嗎？ - 別小看 console.log，它比你朋友還誠實 - 當你開始懷疑人生的時候，問題往往在 .env 記得：解 bug 是工程師和自己內心的對話，不是單純對抗程式。"
  },
  {
    "slug": "article-5",
    "title": "命名真的很難",
    "date": "2025-06-03",
    "tags": [],
    "summary": "誰說命名不重要？命名是一種對混亂世界的溫柔整理。 - data1, data2, data3 是災難的開始 - isActive 和 hasPermission 比你想像中更能讓人理解 - tmp, xxx, wtf 都會在三個月後成為未解之謎 為了你的未來，請給變數一個能傳宗接代的好名字。"
  }
]
