[
  {
    "slug": "custom-queryparam-alias-spring-binding",
    "title": "自定義 @QueryParamAlias 註解：Controller 的參數別名綁定實踐",
    "date": "2025-07-10",
    "tags": ["java", "spring-boot"],
    "summary": "第一次實作自定義註解，回頭看感覺蠻好玩的，想說紀錄一下。會想要自定義註解的原因主要是以下幾點：專案現行的後端系統因為一些歷史原因，某些 api 會需要攜帶大量參數作為請求（大概 15-20 個的那種大量），同時請求中還有 `update_latestuserLOGINinfo` 這樣不易閱讀的參數。"
  },
  {
    "slug": "spring-mvc-handler-exception-resolver",
    "title": "HandlerExceptionResolver：Spring MVC 的全域異常處理機制",
    "date": "2025-06-23",
    "tags": ["java", "spring-boot"],
    "summary": "上篇文章說明了 Spring MVC 的參數綁定機制，這邊文章來講錯誤處理機制。要理解 Spring MVC 的錯誤處理機制，我們需要將視角從 Controller 再往外延伸一層，回到整體請求的處理流程。在 Spring MVC 中，當 DispatcherServlet 接收到 HTTP 請求後，首先會透過 HandlerMapping 決定請求應由哪一個 Handler 負責處理該請求，隨後交由對應的 HandlerAdapter 執行該 Handler 的邏輯。"
  },
  {
    "slug": "spring-controller-param-binding-mechanism",
    "title": "HandlerMethodArgumentResolver：Controller 的參數綁定原理",
    "date": "2025-06-19",
    "tags": ["java", "spring-boot"],
    "summary": "有些能夠簡單使用的東西，背後都封裝了大量的細節與努力。這幾天在公司處理 API Controller 的時候，遇到了一個小問題：當請求是以 post 方法打進來，同時 request body 是以 application/json 的格式傳遞資料的時候，Controller 這邊如果沒有對需要自動綁定的參數加上 @RequestBody 註解，那綁定機制就會失效。"
  },
  {
    "slug": "mysql-offset-performance-issue-and-optimization",
    "title": "SQL 簡潔不等於高效：OFFSET 語法的效能問題",
    "date": "2025-06-17",
    "tags": ["mysql"],
    "summary": "這幾天在回頭補 MySQL 的相關基礎，遇到一個值得記錄的小細節。先說結論：MySQL 的 OFFSET 指令在遇到需要回表的情況下，並不會直接跳過前 n 筆資料，而是會先全數回表撈取，再把前 n 筆資料捨棄，這在分頁操作上來說，如果沒有處理好，很容易遇到「越後面的分頁 loading 越慢」的問題。"
  },
  {
    "slug": "git-work-flows-in-one-guide",
    "title": "一篇文章帶你看懂 git flow, github flow 和 gitlab flow",
    "date": "2025-06-12",
    "tags": ["git"],
    "summary": "昨天重新理解了幾種主流的 git 版控方法，用文章稍微紀錄一下。Git 版控應該是前後端、運維、測試 ...等所有軟體工程師的共同必修之一。它是程式的追蹤管理工具，類似於 gira, trello 等工具，軟體工程師如果在程式上沒有一致且可追蹤的進度，整個團隊會隨著「系統」的規模出現無法協作的狀況：..."
  },
  {
    "slug": "laravel-style-validation-with-java",
    "title": "寫了一個 Laravel 風格的 Java Map Validator",
    "date": "2025-06-11",
    "tags": ["java", "spring-boot"],
    "summary": "先說結論，我還是不習慣在 Java 裡用 Map 包裝參數。這 2 個月在熟悉公司的程式和風格。或許是從 php 搬移過來的關係？公司在開發後端系統的時候，不喜歡用 DTO，主管覺得把參數額外包裝成一個類別（或物件）是很反直覺的事情，所以限制參數都只能用 `Map<String, Object>` 傳遞。"
  },
  {
    "slug": "new-blog-with-react",
    "title": "做了一個新的個人網站 UI",
    "date": "2025-05-30",
    "tags": ["react"],
    "summary": "花了 2 天的時間，重新改造了自己的個人網站。前一代的網站是用 hugo 建的，要說心得的話，hugo 給使用者的體感其實蠻好的：只要先去 hugo 官網，把執行檔載下來，然後從 hugo 的主題網站挑 1-2 個自己喜歡的風格，抓下來就可以用了。"
  },
  {
    "slug": "article-1",
    "title": "使用者登入流程設計",
    "date": "2025-05-17",
    "tags": ["jwt", "frontend"],
    "summary": "在設計登入流程時，除了基本帳號密碼驗證外，還需考量： 1. 密碼加密傳輸（HTTPS） 2. 前後端驗證結果一致性 3. 多因素驗證（MFA）支援 推薦使用 JWT 或 Session 機制搭配 CSRF 防護，來確保安全性與使用體驗的平衡。"
  }
]
